{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport DefaultLayout from '@layouts/default';\nimport Link from 'next/link';\nimport { getConfig, getPostsByTags, getAllPosts } from '@api';\nexport default function Blog(props) {\n  return /*#__PURE__*/_jsxs(DefaultLayout, {\n    title: props.title,\n    description: props.description,\n    children: [/*#__PURE__*/_jsxs(\"p\", {\n      children: [\"List of posts with tags \", props.prettyTags, \":\"]\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      children: props.posts.map(function (post, idx) {\n        return /*#__PURE__*/_jsxs(\"li\", {\n          children: [/*#__PURE__*/_jsx(Link, {\n            href: '/post/' + post.slug,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: post.title\n            })\n          }), \"\\xA0-\\xA0\", /*#__PURE__*/_jsx(\"ul\", {\n            children: post.tags.map(function (tag, index) {\n              return /*#__PURE__*/_jsx(\"li\", {\n                children: /*#__PURE__*/_jsx(Link, {\n                  href: '/posts/' + tag,\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    children: tag\n                  })\n                })\n              }, index);\n            })\n          })]\n        }, idx.toString());\n      })\n    })]\n  });\n}\nexport async function getStaticProps(context) {\n  const config = await getConfig();\n  const postsByTags = await getPostsByTags(context.params.tags);\n  return {\n    props: {\n      posts: postsByTags,\n      title: config.title,\n      description: config.description,\n      prettyTags: context.params.tags.join(\", \")\n    }\n  };\n}\n\nfunction permutations(array) {\n  function p(array, temp) {\n    var i, x;\n\n    if (!array.length) {\n      result.push(temp);\n    }\n\n    for (i = 0; i < array.length; i++) {\n      x = array.splice(i, 1)[0];\n      p(array, temp.concat(x));\n      array.splice(i, 0, x);\n    }\n  }\n\n  var result = [];\n  p(array, []);\n  return result;\n}\n\nexport async function getStaticPaths() {\n  let posts = await getAllPosts();\n  let paths = [];\n  posts.map(post => {\n    let perms = permutations(post.tags);\n    perms.map(perm => {\n      paths.push({\n        params: {\n          tags: perm\n        }\n      });\n    });\n  });\n  return {\n    paths: paths,\n    fallback: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}