{"ast":null,"code":"import _regeneratorRuntime from \"/Volumes/DEV/codeow/nextjs-demo-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/DEV/codeow/nextjs-demo-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport matter from 'gray-matter';\nimport marked from 'marked';\nimport yaml from 'js-yaml';\nexport function getConfig() {\n  return _getConfig.apply(this, arguments);\n}\n\nfunction _getConfig() {\n  _getConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var config;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return import(\"../config.yml\");\n\n          case 2:\n            config = _context.sent;\n            return _context.abrupt(\"return\", yaml.load(config[\"default\"]));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getConfig.apply(this, arguments);\n}\n\nexport function getAllPosts() {\n  return _getAllPosts.apply(this, arguments);\n}\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var context, posts, _iterator, _step, key, post, content, meta;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            context = require.context('../_posts', false, /\\.md$/);\n            posts = [];\n            _iterator = _createForOfIteratorHelper(context.keys());\n            _context2.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 15;\n              break;\n            }\n\n            key = _step.value;\n            post = key.slice(2);\n            _context2.next = 10;\n            return import(\"../_posts/\".concat(post));\n\n          case 10:\n            content = _context2.sent;\n            meta = matter(content[\"default\"]);\n            posts.push({\n              slug: post.replace('.md', ''),\n              title: meta.data.title,\n              tags: meta.data.tags\n            });\n\n          case 13:\n            _context2.next = 5;\n            break;\n\n          case 15:\n            _context2.next = 20;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](3);\n\n            _iterator.e(_context2.t0);\n\n          case 20:\n            _context2.prev = 20;\n\n            _iterator.f();\n\n            return _context2.finish(20);\n\n          case 23:\n            return _context2.abrupt(\"return\", posts);\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 17, 20, 23]]);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getPostsByTags(_x) {\n  return _getPostsByTags.apply(this, arguments);\n}\n\nfunction _getPostsByTags() {\n  _getPostsByTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tags) {\n    var context, posts, _iterator2, _step2, key, post, content, meta;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            context = require.context('../_posts', false, /\\.md$/);\n            posts = [];\n            _iterator2 = _createForOfIteratorHelper(context.keys());\n            _context3.prev = 3;\n\n            _iterator2.s();\n\n          case 5:\n            if ((_step2 = _iterator2.n()).done) {\n              _context3.next = 15;\n              break;\n            }\n\n            key = _step2.value;\n            post = key.slice(2);\n            _context3.next = 10;\n            return import(\"../_posts/\".concat(post));\n\n          case 10:\n            content = _context3.sent;\n            meta = matter(content[\"default\"]);\n\n            if (meta.data.tags.some(function (r) {\n              return tags.includes(r);\n            })) {\n              posts.push({\n                slug: post.replace('.md', ''),\n                title: meta.data.title,\n                tags: meta.data.tags\n              });\n            }\n\n          case 13:\n            _context3.next = 5;\n            break;\n\n          case 15:\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](3);\n\n            _iterator2.e(_context3.t0);\n\n          case 20:\n            _context3.prev = 20;\n\n            _iterator2.f();\n\n            return _context3.finish(20);\n\n          case 23:\n            return _context3.abrupt(\"return\", posts);\n\n          case 24:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 17, 20, 23]]);\n  }));\n  return _getPostsByTags.apply(this, arguments);\n}\n\nexport function getPostBySlug(_x2) {\n  return _getPostBySlug.apply(this, arguments);\n}\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(slug) {\n    var fileContent, meta, content;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return import(\"../_posts/\".concat(slug, \".md\"));\n\n          case 2:\n            fileContent = _context4.sent;\n            meta = matter(fileContent[\"default\"]);\n            content = marked(meta.content);\n            return _context4.abrupt(\"return\", {\n              title: meta.data.title,\n              content: content,\n              tags: meta.data.tags\n            });\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}","map":{"version":3,"sources":["/Volumes/DEV/codeow/nextjs-demo-blog/_api/index.js"],"names":["matter","marked","yaml","getConfig","config","load","getAllPosts","context","require","posts","keys","key","post","slice","content","meta","push","slug","replace","title","data","tags","getPostsByTags","some","r","includes","getPostBySlug","fileContent"],"mappings":"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","sourcesContent":["import matter from 'gray-matter'\nimport marked from 'marked'\nimport yaml from 'js-yaml'\n\nexport async function getConfig() {\n  const config = await import(`../config.yml`)\n  return yaml.load(config.default)\n}\n\nexport async function getAllPosts() {\n  const context = require.context('../_posts', false, /\\.md$/)\n  const posts = []\n  for(const key of context.keys()){\n    const post = key.slice(2);\n    const content = await import(`../_posts/${post}`);\n    const meta = matter(content.default)\n    posts.push({\n      slug: post.replace('.md',''),\n      title: meta.data.title,\n      tags: meta.data.tags      \n    })\n  }\n  return posts;\n}\n\nexport async function getPostsByTags(tags){\n  const context = require.context('../_posts', false, /\\.md$/)\n  const posts = []\n  for(const key of context.keys()){\n      const post = key.slice(2);\n      const content = await import(`../_posts/${post}`);\n      const meta = matter(content.default)\n      if(meta.data.tags.some(r=> tags.includes(r))) {\n          posts.push({\n              slug: post.replace('.md',''),\n              title: meta.data.title,\n              tags: meta.data.tags\n          });\n      }\n  }\n  return posts;\n}\n\nexport async function getPostBySlug(slug) {\n  const fileContent = await import(`../_posts/${slug}.md`)\n  const meta = matter(fileContent.default)\n  const content = marked(meta.content)    \n  return {\n    title: meta.data.title, \n    content: content,\n    tags: meta.data.tags\n  }\n}"]},"metadata":{},"sourceType":"module"}